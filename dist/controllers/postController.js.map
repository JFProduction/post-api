{"version":3,"sources":["../../server/controllers/postController.js"],"names":["postController","post","req","res","body","title","text","link","userId","Post","_creator","save","then","newPost","status","json","success","data","catch","err","getAll","find","sort","populate","path","select","match","posts","getById","id","findById","comments","_comments","getByUser","username","filter"],"mappings":"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","file":"postController.js","sourcesContent":["import db from './../models'\n\nconst postController = {}\n\npostController.post = (req, res) => {\n    const {  \n        title,\n        text,\n        link,\n        userId,\n    } = req.body\n\n    const post = new db.Post({\n        title,\n        text,\n        link,\n        _creator: userId,\n    })\n\n    post.save().then((newPost) => {\n        return res.status(200).json({\n            success: true,\n            data: newPost\n        })\n    }).catch((err) => {\n        return res.status(500).json({\n            err: err\n        })\n    })\n}\n\npostController.getAll = (req, res) => {\n    db.Post.find({}).sort('-createdAt').populate({\n        path: '_creator',\n        select: 'username -_id'\n    }).populate({\n        path: '_comments',\n        select: 'text createdAt _creator',\n        match: { 'isDeleted': false }\n    }).then((posts) => {\n        return res.json({\n            success: true,\n            data: posts\n        })\n    }).catch((err) => {\n        return res.status(500).json({\n            err: err\n        })\n    })\n}\n\npostController.getById = (req, res) => {\n    const { id } = req.body\n    db.Post.findById(id).populate({\n        path: '_creator',\n        select: 'username'\n    }).sort('-createdAt').populate({\n        path: '_comments',\n        select: 'text createdAt _creator',\n        match: { 'isDeleted': false }\n    }).then(post => {\n        return res.status(200).json({\n            comments: post._comments\n        })\n    }).catch((err) => {\n        return res.status(500).json({\n            err: err\n        })\n    })\n}\n\npostController.getByUser = (req, res) => {\n    const { username } = req.body\n\n    db.Post.find({}).sort('-createdAt').populate({\n        path: '_creator',\n        select: 'username'\n    }).populate({\n        path: '_comments',\n        select: 'text createdAt _creator',\n        match: { 'isDeleted': false },\n        sort: '-createdAt'\n    }).then(posts => {\n        res.status(200).json({\n            posts: posts.filter(post => {\n                return post._creator.username === username\n            })\n        })\n    }).catch(err => {\n        return res.status(500).json({\n            err: err\n        })\n    })\n}\n\nexport default postController"]}